import {Button, Drawer, Layout, Modal, Select, Space} from "antd";
import {useCrypto} from "../../context/crypto-context.jsx";
import {useEffect, useState} from "react";
import CoinInfoModal from "../CoinInfoModal.jsx";
import AddAssetForm from "../AddAssetForm.jsx";

const headerStyle = {
  width: '100%',
  textAlign: 'center',
  height: '60px',
  padding: '1rem',
  display: 'flex',
  background: "grey",
  justifyContent: 'space-between',
  alignItems: 'center'
};

export default function AppHeader() {
  const [select, setSelect] = useState(false);
  const [coin, setCoin] = useState(null);
  const [modal, setModal] = useState(false);
  const [drawer, setDrawer] = useState(false);
  const {crypto} = useCrypto();

  useEffect(() => {
    const keypress = (e) => {
      if (e.key === '/') {
        setSelect((prev) => !prev)
      }
    }
    
    document.addEventListener('keypress', keypress) 
  }, []);
  
  function handleSelect(value) {
    setCoin(crypto.find(coin => coin.id === value))
    setModal(true)
  } 
  
  return (
   <Layout.Header style={headerStyle}>
     <Select
       style={{ width: 250 }}
       value="press / to open"
       onSelect={handleSelect}
       onClick={() => setSelect((prev) => !prev)}
       open={select}
       options={crypto.map(coin => ({
         label: coin.name, 
         value: coin.id,
         icon: coin.icon
       }))}
       optionRender={(option) => (
         <Space>
           <img style={{width: 20}} src={option.data.icon} alt={option.data.label}/> {option.data.label}
         </Space>
       )}
     />
     
     <Button type="primary" onClick={() => setDrawer(true)}>Add Asset</Button>

     <Modal
            open={modal} 
            onCancel={() => setModal(false)}
            footer={null}
     >
      <CoinInfoModal coin={coin}/>
     </Modal>
     
     <Drawer 
       width={600} 
       title="Add Asset" 
       onClose={() => setDrawer(false)} 
       open={drawer}
       destroyOnClose
     >
       <AddAssetForm onClose={() => setDrawer(false)}/>
     </Drawer>
   </Layout.Header>
  )
} 